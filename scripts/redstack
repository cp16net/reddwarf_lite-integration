#!/usr/bin/env bash
###############################################################################
# RedStack, the Reddwarf Dev Machine Controller                               #
###############################################################################
#                                                                             #
# This script provides all the functionality to run all the steps from        #
# setting up the enviornment, resetting the nova database to running the      #
# test.                                                                       #
#                                                                             #
###############################################################################

REDSTACK_SCRIPTS=${REDSTACK_SCRIPTS:-`pwd`}
REDSTACK_TESTS=$REDSTACK_SCRIPTS/../tests/

USERHOME="/home/"`whoami`

# Load options not checked into VCS.
if [ -f $REDSTACK_SCRIPTS/options.rc ]; then
    . $REDSTACK_SCRIPTS/options.rc
fi

# Bail on errors.
set -e

# Load global configuration variables.
. $REDSTACK_SCRIPTS/redstack.rc
. $REDSTACK_SCRIPTS/reviews.rc

# PATH_REDDWARF more than likely has file separators, which sed does not like
# This will escape them
ESCAPED_PATH_REDDWARF=`echo $PATH_REDDWARF | sed 's/\//\\\\\//g'`
ESCAPED_REDSTACK_SCRIPTS=`echo $REDSTACK_SCRIPTS | sed 's/\//\\\\\//g'`

# Load functions devstack style
. $REDSTACK_SCRIPTS/functions

if [ -f $PATH_ENV_CONF ]; then
    source $PATH_ENV_CONF
fi

TEST_HOME="$REDSTACK_SCRIPTS/../tests"

INTEGRATION_CONF="/tmp/integration"
TESTS_CONF="$INTEGRATION_CONF/tests.conf"



###############################################################################
# Utility functions
###############################################################################

APT_GET_ARGS="-y --allow-unauthenticated --force-yes"

function exclaim () {
    echo "*******************************************************************************"
    echo "$@"
    echo "*******************************************************************************"
}

function pkg_install () {
    echo Installing $@...
    sudo -E DEBIAN_FRONTEND=noninteractive $HTTP_PROXY apt-get $APT_GET_ARGS install $@
}

function pkg_update () {
    echo Updating $@...
    sudo -E DEBIAN_FRONTEND=noninteractive $HTTP_PROXY apt-get $APT_GET_ARGS update $@
}

function pkg_remove () {
    echo Uninstalling $@...
    sudo -E apt-get $APT_GET_ARGS remove $@
}

function set_home_dir() {
    self="${0#./}"
    base="${self%/*}"
    current=`pwd`
    if [ "$base" = "$self" ] ; then
        HOME="$current/"
    elif [[ $base =~ ^/ ]]; then
        HOME="$base/"
    else
        HOME="$current/$base/"
    fi
}

function set_http_proxy() {
    if [ ! "${http_proxy}" = '' ]; then
        HTTP_PROXY="http_proxy=$http_proxy https_proxy=$https_proxy"
    fi
}

function echo_id_from_table () {
    # Given a command that returns a table, prints only the id part.
    echo `$@ | grep ' id ' | awk '{print $4}'`
}

function get_ip_for_device() {
    /sbin/ifconfig $1 | awk '/inet addr/{gsub(/addr:/,"");print $2}'
}

function ip_chunk() {
    # Given 1-4 returns a bit of where the ip range starts.
    # Full IP= `ip_chunk 1`.`ip_chunk 2`.`ip_chunk 3`.`ip_chunk 4`
    get_ip_for_device $1 | cut -d. -f$2
}

function keystone_add_user() {
    # Adds a user. Prints the UUID to standard out.
    USER_NAME=$1
    USER_PASS=$2
    USER_EMAIL=$3
    # Create the user "reddwarf"
    USER_UUID=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 user-list | grep $USER_NAME | awk '{print $2}'`
    if [ -z $USER_UUID ]; then
        USER_UUID=`echo_id_from_table keystone \
                   --endpoint http://localhost:35357/v2.0  \
                   --token be19c524ddc92109a224 user-create \
                   --name=$USER_NAME --pass="$USER_PASS" --email=$USER_EMAIL`
    fi

    echo $USER_UUID
}

function keystone_add_user_role() {
    TENANT_UUID=$1
    USER_UUID=$2
    ROLE_UUID=$3
    echo "keystone --endpoint http://localhost:35357/v2.0
        --token be19c524ddc92109a224 user-role-add
        --tenant_id $TENANT_UUID
        --user $USER_UUID
        --role $ROLE_UUID"
    keystone --endpoint http://localhost:35357/v2.0 \
        --token be19c524ddc92109a224 user-role-add \
        --tenant_id $TENANT_UUID \
        --user $USER_UUID \
        --role $ROLE_UUID
}

function keystone_manage () {
    keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 $@
}

function reddwarf_tenant_id() {
    keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 tenant-list | grep reddwarf | awk '{print $2}'
}

function configure_keystone() {
    exclaim "Configuring keystone..."


    # Create the tenant "reddwarf".
    # First we should check if these exist
    REDDWARF_TENANT=`reddwarf_tenant_id`
    if [ -z $REDDWARF_TENANT ]; then
        REDDWARF_TENANT=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 tenant-create --name=reddwarf`
    fi

    REDDWARF_ROLE=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 role-list | grep reddwarf | awk '{print $2}'`
    if [ -z "$REDDWARF_ROLE" ]; then
        REDDWARF_ROLE=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 role-create --name=reddwarf`
    fi

    DAFFY_TENANT=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 tenant-list | grep daffy | awk '{print $2}'`
    if [ -z $DAFFY_TENANT ]; then
        DAFFY_TENANT=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 tenant-create --name=daffy`
    fi

    DAFFY_ROLE=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 role-list | grep daffy | awk '{print $2}'`
    if [ -z "$DAFFY_ROLE" ]; then
        DAFFY_ROLE=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 role-create --name=daffy`
    fi

    REDDWARF_USER=`keystone_add_user reddwarf REDDWARF-PASS reddwarf@example.com`

    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    # TODO: Restrict permissions.
    REDDWARF_USER=`keystone_add_user radmin radmin radmin@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    REDDWARF_USER=`keystone_add_user Boss admin boss@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    REDDWARF_USER=`keystone_add_user chunk chunk chunk@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    REDDWARF_USER=`keystone_add_user daffy daffy daffy@example.com`
    keystone_add_user_role $DAFFY_TENANT $REDDWARF_USER $DAFFY_ROLE

    REDDWARF_USER=`keystone_add_user examples examples examples@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    echo "
REDDWARF_TENANT=$REDDWARF_TENANT
REDDWARF_USER=$REDDWARF_USER
REDDWARF_ROLE=$REDDWARF_ROLE
" > $PATH_ENV_CONF

    echo "
# REDDWARF_TENANT=$REDDWARF_TENANT
# REDDWARF_USER=$REDDWARF_USER
# REDDWARF_ROLE=$REDDWARF_ROLE"

    echo "Checking login..."
    # Now attempt a login
    curl -d '{"auth":{"passwordCredentials":{"username": "reddwarf", "password": "REDDWARF-PASS"},"tenantName":"reddwarf"}}' \
     -H "Content-type: application/json" http://localhost:35357/v2.0/tokens

    # Register reddwarf service.
    SERVICE_UUID=`keystone_manage service-list | grep reddwarf | awk '{print $2}'`
    if [ -z $SERVICE_UUID ]; then
        OS_USERNAME=reddwarf \
        OS_PASSWORD=REDDWARF-PASS \
        OS_AUTH_URL='http://localhost:8779/v0.1/$(tenant_id)s' \
        keystone_manage service-create --name=reddwarf \
                            --type=dbaas \
                            --description="Reddwarf"
    fi

}

###############################################################################


###############################################################################
# Install all the required dependencies
###############################################################################

function install_packages_1() {
    # Called before devstack
    exclaim 'Updating dependencies (part 1a)...'
    pkg_update
    exclaim 'Installing dependencies (part 1b)...'
    GetOSVersion
    if [[ "$os_RELEASE" = "12.04" ]]; then
        pkg_install git-core kvm-ipxe ubuntu-vm-builder
    else
        pkg_install git-core kvm-pxe ubuntu-vm-builder
    fi
}


function add_to_keystone_conf() {
    exclaim 'adding reddwarf to keystone catalog templates'
    echo '
catalog.RegionOne.reddwarf.publicURL = http://localhost:8779/v0.1/$(tenant_id)s
catalog.RegionOne.reddwarf.adminURL = http://localhost:8779/v0.1/$(tenant_id)s
catalog.RegionOne.reddwarf.internalURL = http://localhost:8779/v0.1/$(tenant_id)s
catalog.RegionOne.reddwarf.name = Reddwarf
    ' >> /etc/keystone/default_catalog.templates
}

function install_packages_2() {
    # Called after devstack.
    exclaim "Installing dependencies (part 2)..."
    # The default version of pip Ubuntu installs is old.
    cd /tmp
    sudo pip install --upgrade pip

    pkg_install python-pexpect
    #TODO(tim.simpson): Install unstable branch for now.

    exclaim "Installing Reddwarf Client..."
    pushd $PATH_PYTHON_REDDWARFCLIENT
    sudo python setup.py develop
    popd

    exclaim "Installing Proboscis."
    sudo pip install openstack.nose_plugin
    #sudo pip install proboscis

    sudo rm -rf /opt/stack/python-proboscis
    cd /opt/stack
    git_clone https://github.com/TimSimpsonR/python-proboscis.git \
        /opt/stack/python-proboscis runs_after_dangerous
    cd /opt/stack/python-proboscis
    sudo python setup.py develop
    cd /tmp

    echo "Adding to nova.conf..."
    echo "
logdir=$REDSTACK_SCRIPTS/../report/logs/
logfile_mode=660
##lock_path=/tmp
" >> /etc/nova/nova.conf



    # This is probably a kludge, but we turn off the error stuff here because
    # if we can't stop the screen its not important enough to kill this
    # process.
    set +e
    cmd_stop_deps
    set -e
    add_to_keystone_conf

    set +e
    cmd_start_deps
    set -e
}


function install_devstack() {
    exclaim "Installing devstack..."
    # Installs devstack (if needed).
    if [ ! -d $PATH_DEVSTACK_SRC ]; then
        echo "DevStack not in a shared folder, cloning from git."
        mkdir -p $PATH_DEVSTACK_SRC
        git clone git://github.com/openstack-dev/devstack.git $PATH_DEVSTACK_SRC
    fi
}

function install_devstack_code() {
    exclaim "Installing devstack projects..."
    # Ensures present user can get to the devstack dirs
    sudo mkdir -p $PATH_DEVSTACK_OUTPUT
    if [ ! -w $PATH_DEVSTACK_OUTPUT ]; then
        sudo chown `whoami` $PATH_DEVSTACK_OUTPUT
    fi
    # Clones all of the code to where devstack expects it to be
    cd $PATH_DEVSTACK_OUTPUT
    for project in glance horizon keystone nova python-keystoneclient python-novaclient python-quantumclient
    do
      if [ ! -d $project ]; then
          echo "Creating a new clone of $project..."
          git clone git://github.com/openstack/$project
      else
          echo "$project was already cloned or exists in a shared folder, ignoring..."
      fi
    done
}

function install_reviews_on_top_of_devstack() {
    exclaim "Putting gerrit review code on top of the existing devstack code"
    run_review_for nova $PATH_NOVA $REVIEW_NOVA
    run_review_for python-novaclient $PATH_PYTHON_NOVACLIENT $REVIEW_PYTHON_NOVACLIENT
    run_review_for keystone $PATH_KEYSTONE $REVIEW_KEYSTONE
    run_review_for python-keystoneclient $PATH_KEYSTONECLIENT $REVIEW_PYTHON_KEYSTONECLIENT
    run_review_for glance $PATH_GLANCE $REVIEW_GLANCE
}

function run_review_for() {
    # Splits based on colon in the REVIEW_ARG and pulls from
    GIT_NAME=$1
    PATH_ARG=$2
    REVIEW_ARG=$3
    for review in `echo $REVIEW_ARG| tr ":" "\n"`
    do
        # This should be the ref spec for what we pull
        pushd $PATH_ARG
        git pull https://review.openstack.org/p/openstack/$GIT_NAME refs/changes/$review
        popd
    done
}

function run_devstack() {
    exclaim "Running devstack..."
    cd $PATH_DEVSTACK_SRC

    echo "
# Set some arguments for devstack.
# These passwords originally come from redstack.rc.
MYSQL_PASSWORD=$MYSQL_PASSWORD
RABBIT_PASSWORD=$RABBIT_PASSWORD
SERVICE_TOKEN=$SERVICE_TOKEN
ADMIN_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$SERVICE_PASSWORD
# The lock_path is by default /opt/stack/nova; if this path is a shared
# folder in VirtualBox things seem to break. We fix it by setting EXTRA_OPS
# to force lock_path to /tmp.
EXTRA_OPTS=(lock_path=/tmp)
" > localrc
    if [ -n "$USING_VAGRANT" ]
    then
        echo "
# This is similar to code found at
# https://github.com/bcwaldon/vagrant_devstack/blob/master/Vagrantfile
# and seems to make instances ping'able in VirtualBox.
FLAT_INTERFACE=eth1
PUBLIC_INTERFACE=eth1
FLOATING_RANGE=`ip_chunk eth0 1`.`ip_chunk eth0 2`.`ip_chunk eth0 3`.128/28
HOST_IP=`ip_chunk eth0 1`.`ip_chunk eth0 2`.`ip_chunk eth0 3`.`ip_chunk eth0 4`
" >> localrc
    fi
    ./stack.sh
}

function ensure_local_sources() {
    exclaim "Making sure local sources are up to date..."
    # this method will only clone if the sources dont exist,
    # or if RECLONE=yes is set
    git_clone $REPO_REDDWARF $PATH_REDDWARF $BRANCH_REDDWARF
    git_clone $REPO_REDDWARFCLIENT $PATH_PYTHON_REDDWARFCLIENT $BRANCH_REDDWARFCLIENT
}

function cmd_install() {
    install_packages_1
    install_devstack
    install_devstack_code
    install_reviews_on_top_of_devstack
    run_devstack
    ensure_local_sources
    install_packages_2
    exclaim "FINISHED INSTALL"
}



###############################################################################
# Build
###############################################################################

function setup_py() {
    # Calls setup.py in the given directory.
    echo "CD into $1"
    pushd $1
    sudo python setup.py develop
    popd
}

function create_package_repo() {
    exclaim "Installing Apt Repo...using reprepro"
    pkg_install reprepro apache2 bc debhelper

    # install the apt repo from /var/www
    # add distributions file to conf
    sudo mkdir -p $PACKAGES_DIR/{conf,incoming}

    echo 'Origin: Rackspace
Label: Rackspace
Codename: squeeze
Architectures: i386 amd64
Components: main
Description: Rackspace DBaaS APT Repository' | sudo tee $PACKAGES_DIR/conf/distributions
}

function munge_apache2() {
	exclaim "Munging configs for apache2 (horizon has altered the default)"

	# If the Additional Listen port is not in the conf, add it
	is_in_portsfile=`grep 'Listen 8080' /etc/apache2/ports.conf |wc -l`
    if [ $is_in_portsfile == 0 ]
    then
		echo "Listen 8080" | sudo tee -a /etc/apache2/ports.conf
    fi

    # Add the vhost for 8080 because horizon is using 80
	echo "<VirtualHost *:8080>

    DocumentRoot /var/lib/packages

    ErrorLog /var/log/apache2/error.log
    LogLevel warn
    CustomLog /var/log/apache2/access.log combined
</VirtualHost>
	" | sudo tee /etc/apache2/sites-available/001-apt-repo

	sudo a2ensite 001-apt-repo
	sudo service apache2 reload
}

function add_dbass_mycnf_to_package_repo() {
	exclaim "Building and uploading dbaasmycnf package..."
	mkdir -p $PACKAGES_DIR
	mkdir -p $BUILD_DIR
	cp -R $PATH_REDDWARF/contrib/dbaas-mycnf $BUILD_DIR
	cd $BUILD_DIR/dbaas-mycnf
	sudo -E ./builddeb.sh
	sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze dbaas-mycnf
	sudo -E reprepro --ignore=wrongdistribution -Vb $PACKAGES_DIR include squeeze *.changes
}

function cmd_build() {
    # Run setup.py for all projects.
    exclaim "Calling setup for all dependencies..."
    setup_py $PATH_NOVA
    setup_py $PATH_PYTHON_NOVACLIENT
    setup_py $PATH_PYTHON_REDDWARFCLIENT
    setup_py $PATH_REDDWARF
    create_package_repo
    munge_apache2
    add_dbass_mycnf_to_package_repo
}


###############################################################################
# Build the image
###############################################################################

function generate_empty_passphrase_ssh_key() {
    exclaim "generating a empty passphrase DEV ONLY rsa key"
    HOMEDIR=$1
    expect -c "
spawn /usr/bin/ssh-keygen -f $HOMEDIR/.ssh/id_rsa -q
expect \"empty for no passphrase\"
send \n
expect assphrase
send \n
expect eof"
}

# Grab a numbered field from python prettytable output
# Fields are numbered starting with 1
# Reverse syntax is supported: -1 is the last field, -2 is second to last, etc.
# get_field field-number
function get_field() {
    while read data; do
        if [ "$1" -lt 0 ]; then
            field="(\$(NF$1))"
        else
            field="\$$(($1 + 1))"
        fi
        echo "$data" | awk -F'[ \t]*\\|[ \t]*' "{print $field}"
    done
}

function get_glance_id () {
    echo `$@ | grep ' id ' | get_field 2`
}

function cmd_set_image() {
    GLANCE_IMAGEID=$1
    SERVICE_TYPE=$2
    #TODO(hub-cap): Upload this sucker to our database.
    # This should be a reddwarf-manage function
    exclaim "Registering Glance image $GLANCE_IMAGEID with Reddwarf..."

    set +e
    mysql_reddwarf "INSERT INTO service_images VALUES('1','$SERVICE_TYPE','$GLANCE_IMAGEID');"
    set -e
    mysql_reddwarf "UPDATE service_images SET image_id = '$GLANCE_IMAGEID' where service_name = '$SERVICE_TYPE';"

    # Reminder: Check the glance database with:
    # $ glance index -A {token-id}
}

function upload_image_to_glance() {
    exclaim "uploading the image to glance."

    IMAGE_NAME=$1
    REDDWARF_TOKEN=$2
    IMAGE_LOC=$3
    UBUNTU_DISTRO=$4
    SERVICE_TYPE=$5
    REDDWARF_TENANT=$6

    GLANCE_IMAGEID=`get_glance_id cmd_glance_client image-create \
        --name="$IMAGE_NAME" --public \
        --container-format=ovf --disk-format=qcow2 \
        --owner=$REDDWARF_TENANT < $IMAGE_LOC`

    echo "IMAGE ID?"
    echo $GLANCE_IMAGEID
    if [ -z "$GLANCE_IMAGEID" ];
    then
        echo "Glance upload failed!"
        exit 1
    fi

    cmd_set_image $GLANCE_IMAGEID $SERVICE_TYPE
}

function build_vm() {
    exclaim "Actually building the image, this can take up to 15 minutes"

    HOMEDIR=$1
    USERNAME=$2
    UBUNTU_DISTRO_NAME=$3
    VM_PATH=$4
    SERVICE_TYPE=$5

    # Create the guest with the specific files
    mkdir -p $HOMEDIR/.ssh
    if [ ! -e $HOMEDIR/.ssh/id_rsa.pub ]
    then
        pkg_install expect

        # Generate a public key
        generate_empty_passphrase_ssh_key $HOMEDIR
    fi

    # Time to create the files to copy into the VM
    COPY_FILE=/tmp/guest-agent-files.txt
    rm -fr $COPY_FILE

    # the bootstrap_init-$SERVICE_TYPE.sh file is used in --firstboot param of ubuntu-vm-builder
    # This file copies the current reddwarf codebase into each spawned image
    # and executes the guestagent as a service. New code to reddwarf does not require
    # a new image, just a new create of an instance.
    # Please note, this is ONLY for dev and should not be considered production ready.
    INIT_FILE=bootstrap_init-${SERVICE_TYPE}.sh
    cp $REDSTACK_SCRIPTS/files/$INIT_FILE /tmp

    sed -i.bak "s/PATH_REDDWARF/$ESCAPED_PATH_REDDWARF/g" /tmp/$INIT_FILE
    sed -i.bak "s/USERNAME/$USERNAME/g" /tmp/$INIT_FILE

    # Apt repo on the local machine
    cp $REDSTACK_SCRIPTS/files/apt_repo.list /tmp
    echo "/tmp/apt_repo.list /etc/apt/sources.list.d/apt_repo.list" >> $COPY_FILE

    # Upstart script to start the guest
    cp $REDSTACK_SCRIPTS/files/reddwarf-guest.upstart.conf /tmp
    sed -i.bak "s/USERNAME/$USERNAME/g" /tmp/reddwarf-guest.upstart.conf
    echo "/tmp/reddwarf-guest.upstart.conf /etc/init/reddwarf-guest.conf" >> $COPY_FILE

    # Now put the pub key in this machines auth keys
    # so the vm can log in to the host (scp from bootstrap_init-$SERVICE_TYPE.sh)
    # This will also enable us to log in to the dev instances w/o a password
    is_in_keyfile=`cat $HOMEDIR/.ssh/id_rsa.pub |grep -f - $HOMEDIR/.ssh/authorized_keys |wc -l`
    if [ $is_in_keyfile == 0 ]
    then
        echo "Adding keyfile to authorized_keys, it does not yet exist"
        cat $HOMEDIR/.ssh/id_rsa.pub >> $HOMEDIR/.ssh/authorized_keys
    fi

    # These will be the way the firstboot script phones home to get the latest guest via scp.
    # See bootstrap_init-$SERVICE_TYPE.sh for more info on what it does
    # man ubuntu-vm-builder for more infomration on the --copy flag
    echo "$HOMEDIR/.ssh/id_rsa.pub $HOMEDIR/.ssh/id_rsa.pub" >> $COPY_FILE
    echo "$HOMEDIR/.ssh/id_rsa $HOMEDIR/.ssh/id_rsa" >> $COPY_FILE
    echo "$HOMEDIR/.ssh/authorized_keys $HOMEDIR/.ssh/authorized_keys" >> $COPY_FILE

    if [ $SERVICE_TYPE == 'mysql' ]
    then
        PKGS="--addpkg mysql-server-5.1"
    else
        exclaim "Warning: You did not pass in a valid image type, the image may fail"
    fi

    #build a qemu image
    VM_BUILDER_ARGS="qemu $UBUNTU_DISTRO_NAME $PKGS \
         --addpkg vim --addpkg openssh-server \
         --addpkg gcc --addpkg python-dev --addpkg rsync \
         --addpkg libxml2-dev --addpkg libxslt-dev \
         --addpkg python-setuptools --addpkg python-pip \
         --addpkg python-sqlalchemy --addpkg python-lxml \
         --addpkg python-routes --addpkg python-eventlet \
         --addpkg python-webob --addpkg python-kombu \
         --addpkg python-pastedeploy --addpkg python-paste \
         --addpkg python-netaddr --addpkg python-httplib2 \
         --addpkg python-iso8601 --addpkg python-novaclient \
         --addpkg python-pexpect --addpkg python-mysqldb \
         --addpkg python-migrate \
         --copy $COPY_FILE --user $USERNAME --pass $USERNAME \
         --firstboot /tmp/$INIT_FILE -d $VM_PATH"
    echo "Running the following command:"
    echo "sudo ubuntu-vm-builder $VM_BUILDER_ARGS"
    sudo ubuntu-vm-builder $VM_BUILDER_ARGS
}

function cmd_build_image() {
    exclaim "Building an image for use with development and integration tests."
    if [ -z "$1" ]
    then
        echo "You must pass an image type to build, like mysql"
        exit 1
    fi
    SERVICE_TYPE=$1


    USERNAME=`whoami`
    HOMEDIR=`getent passwd $USERNAME | cut -d: -f6`
    mkdir -p /home/$USERNAME/images
    VM_PATH=/home/$USERNAME/images/oneiric_${SERVICE_TYPE}_image
    UBUNTU_DISTRO=ubuntu_oneiric
    UBUNTU_DISTRO_NAME=oneiric

    # If the path doesnt exist, build it, otherwise just upload it
    if [ ! -d $VM_PATH ]
    then
        build_vm $HOMEDIR $USERNAME $UBUNTU_DISTRO_NAME $VM_PATH $SERVICE_TYPE
    else
        exclaim "Found image in $VM_PATH using the qcow2 image found here..."
    fi

    QCOW_IMAGE=`find $VM_PATH -name '*.qcow2'`
    REDDWARF_TOKEN=`retrieve_token reddwarf REDDWARF-PASS reddwarf`

    # Now upload it
    upload_image_to_glance "${UBUNTU_DISTRO_NAME}_mysql_image" $REDDWARF_TOKEN $QCOW_IMAGE $UBUNTU_DISTRO $SERVICE_TYPE $REDDWARF_TOKEN
}


###############################################################################
# Run Unit Tests
###############################################################################

function cmd_unit_tests() {
    exclaim "Running Reddwarf Unit Tests..."
    $PATH_REDDWARF/run_tests.sh -N
}

###############################################################################
# Start various OpenStack daemons interactively in a screen session
###############################################################################

function cmd_start_deps() {
    if [[ -e $PATH_DEVSTACK_SRC/stack-screenrc ]]; then
        screen -dm -c $PATH_DEVSTACK_SRC/stack-screenrc
    fi
}



function cmd_stop_deps() {
    cd $PATH_DEVSTACK_SRC
    screen -S stack -X quit
}


###############################################################################
# Initialize Reddwarf
###############################################################################

function fix_rd_configfile() {
    cd $PATH_REDDWARF
    cp etc/reddwarf/reddwarf.conf.sample /tmp
    # Do some munging to get it a-working
    # Tenant is no longer needed from the config, but we are leaving it in
    # until we have a better example of stuff to sed out.
    # sed -i.bak "s/reddwarf_tenant_id=.*/reddwarf_tenant_id=$REDDWARF_TENANT/g" /tmp/reddwarf.conf.sample
}

function rd_manage() {
    cd $PATH_REDDWARF
    bin/reddwarf-manage --config-file=/tmp/reddwarf.conf.sample $@
}

function mod_test_conf() {

    cp $REDSTACK_SCRIPTS/conf/test.conf $USERHOME
    sed -i "s/\/integration\/report/$ESCAPED_REDSTACK_SCRIPTS\/\.\.\/report/" $USERHOME/test.conf
}

function cmd_initialize() {
    exclaim 'Initializing...'

    echo "Modifying test.conf with appropriate values"
    mod_test_conf

    echo "Creating reddwarf db..."
    mysql_nova "DROP DATABASE IF EXISTS reddwarf;"
    mysql_nova "CREATE DATABASE reddwarf;"

    #run_devstack
    mkdir -p $PATH_INTEGRATION_CONF

    exclaim "Creating Keystone users..."
    configure_keystone

    exclaim "Making a temporary reddwarf config file..."
    fix_rd_configfile

    exclaim "Initializing the Reddwarf Database..."
    rd_manage db_sync repo_path=/opt/stack/reddwarf_lite/reddwarf_test.sqlite
}

###############################################################################
# Start Reddwarf specific daemons interactively in a screen session
###############################################################################

function screen_it {
    echo "Starting $@..."
    screen -S reddwarf -X screen -t $1
    screen -S reddwarf -p $1 -X stuff "$2$NL"
}

function cmd_start() {
    if [ ! -f ~/.screenrc ]; then
    cat >~/.screenrc <<EOF
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G}%H %{..Y}%d/%m %c"

defscrollback 1024

vbell off
startup_message off
EOF
    fi

    NL=`echo -ne '\015'`

    screen -d -m -S reddwarf -t reddwarf
    sleep 1

    screen_it reddwarf "cd $PATH_REDDWARF; bin/reddwarf-server --config-file=etc/reddwarf/reddwarf.conf.sample"
}

function cmd_run() {
    cd $PATH_REDDWARF; bin/reddwarf-server \
        --config-file=etc/reddwarf/reddwarf.conf.sample $@
}

function cmd_run_fake() {
    CONF_FILE=$PATH_REDDWARF/etc/reddwarf/reddwarf.conf.test
    cd $PATH_REDDWARF
    set -e
    rm reddwarf_test.sqlite
    set +e
    bin/reddwarf-manage --config-file=$CONF_FILE db_sync \
        repo_path=reddwarf_test.sqlite
    sqlite3 reddwarf_test.sqlite \
        "INSERT INTO service_images VALUES('1','mysql','fake');"
    bin/reddwarf-server --config-file=$CONF_FILE $@ \
        repo_path=reddwarf_test.sqlite
}

###############################################################################
# Stop any active Reddwarf screen session
###############################################################################
###############################################################################

function cmd_stop() {
    screen -S reddwarf -X quit
    rm *.pid*
}


###############################################################################
# Run Integration Tests
###############################################################################

function cmd_int_tests() {
    exclaim "Running Reddwarf Integration Tests..."
    cd $REDSTACK_SCRIPTS
    export TEST_CONF=$USERHOME/test.conf
    if [ $# -lt 1 ]; then
        args="--group=blackbox"
    else
        args="$@"
    fi

    # -- verbose makes it prettier.
    # -- logging-clear-handlers keeps the novaclient and other things from
    #    spewing logs to stdout.
    args="$INT_TEST_OPTIONS -B $REDSTACK_TESTS/integration/int_tests.py --verbose --logging-clear-handlers $args"
    echo "python $args"
    python $args
}


###############################################################################
# Misc. tools
###############################################################################

function mysql_nova() {
    echo mysql nova --execute "$@"
    mysql -u root -p$MYSQL_PASSWORD nova --execute "$@"
}

function mysql_reddwarf() {
    echo mysql reddwarf --execute "$@"
    mysql -u root -p$MYSQL_PASSWORD reddwarf --execute "$@"
}

function cmd_nova_client() {
    # This serves as an example of how to call the Nova client script.
    TESTVOLUME=`echo "$@" | awk '/volume/{print $1}'`
    if [ -z "$TESTVOLUME" -o "$TESTVOLUME" = "volume-attach" -o "$TESTVOLUME" = "volume-detach" ]; then
        nova --auth_url=http://localhost:35357/v2.0 \
            --tenant_name=reddwarf --username=radmin --password=radmin \
            --service_type=compute --region_name=RegionOne \
            --service_name='Compute Service' $@
    else
        nova --auth_url=http://localhost:35357/v2.0 \
            --tenant_name=reddwarf --username=radmin --password=radmin \
            --service_type=volume --region_name=RegionOne \
            --service_name='Volume Service' $@
    fi
}

function cmd_glance_client() {
    REDDWARF_TENANT=`reddwarf_tenant_id`
    glance --os-auth-url=http://localhost:35357/v2.0 \
        --os-username=radmin --os-password=radmin \
        --os-tenant-id $REDDWARF_TENANT $@
}

function cmd_rd_client() {
    # This serves as an example of how to call the Reddwarf client script.
    reddwarf-cli auth login radmin radmin reddwarf \
        http://localhost:35357/v2.0
    reddwarf-cli $@
}

function cmd_delete_nova_instance() {
    # Nova will not let you delete an instance whose state is error, but we
    # won't let that stop us.
    echo "Deleting instance $1..."
    mysql_nova "UPDATE instances SET vm_state='active' WHERE vm_state='error' AND uuid='$1';"
    cmd_nova_client delete $1
}

function cmd_wipe_logs() {
    for file in `ls $REDSTACK_SCRIPTS/../report/logs/*.log`
    do
        echo "Reseting log file $file..."
        echo "Reset at `date`" > $file
    done
}

function cmd_rd_sql() {
    mysql -u root -p$MYSQL_PASSWORD reddwarf
}

function cmd_vagrant_ssh() {
    # Runs a command on a vagrant VM from the host machine.
    VHOST=`vagrant ssh_config host | awk '/HostName/{print $2}'`
    VUSER=`vagrant ssh_config host | awk '/User /{print $2}'`
    VPORT=`vagrant ssh_config host | awk '/Port/{print $2}'`
    VIDFILE=`vagrant ssh_config host | awk '/IdentityFile/{print $2}'`
    echo ssh ${VUSER}@${VHOST} -p ${VPORT} -i ${VIDFILE} -o NoHostAuthenticationForLocalhost=yes "$@"
    ssh ${VUSER}@${VHOST} -p ${VPORT} -i ${VIDFILE} -o NoHostAuthenticationForLocalhost=yes "$@"
}


function cmd_run_ci() {
    exclaim "Running CI suite..."
    set +e
    cmd_stop_deps
    cmd_stop
    set -e
    cmd_install
    cmd_build
    cmd_initialize
    # The arg will be the image type
    cmd_build_image $1
    cmd_start
    cmd_int_tests
}

function cmd_clear() {
    cmd_int_tests --group=dbaas.api.instances.delete
    LIST=`virsh -q list|awk '{print $1}'`
    for i in $LIST; do sudo virsh destroy $i; done
    mysql_nova "DELETE FROM instance_info_caches;"
    mysql_nova "DELETE FROM instances;"
    mysql_reddwarf "DELETE FROM instances;"
    mysql_reddwarf "DELETE FROM service_statuses;"
    # Obliterate rabbit.
    for i in stop_app reset start_app "change_password guest $RABBIT_PASSWORD"; \
    do sudo rabbitmqctl $i; done
}

function cmd_kick_start() {
    cmd_build
    cmd_initialize
    cmd_build_image $1
    cmd_start
}

function cmd_update_projects() {
  for project in $(cat $REDSTACK_SCRIPTS/projects-list); do
     if [ ! -d $PATH_DEVSTACK_OUTPUT/$project ]; then
          echo "Creating a new clone of $project..."
          git_clone https://github.com/openstack/"$project".git ${PATH_DEVSTACK_OUTPUT}/$project master
      else
          echo "$project was already cloned or exists pulling changes"
          cd $PATH_DEVSTACK_OUTPUT/$project
          git pull
      fi
  done
}



###############################################################################
# Process the user provided command and run the appropriate command
###############################################################################

# Lets not run this as the root user
if [ $EUID -eq 0 ]; then
   echo "You are running this script as root. You need to run as a regular user"
   exit 1
fi

# Set this to exit immediately on error
set -o errexit

set_home_dir
set_http_proxy

function print_usage() {
    echo "Usage: $0 [command]"
    echo "
    Commands :
        --setup environment--
          install         - Install all the required
          build           - Build the packages (including the agent)
          initialize      - Cleans nova database, sets everything up.
          build-image     - Builds the vm image and adds it to glance (requires initialize)

        --helper for environment--
          kick-start      - kick start the setup of reddwarf.
                            (redstack build/initialize/build-image/start)

        --reddwarf dependency services--
          start-deps      - Start or resume daemons Reddwarf depends on.
          stop-deps       - Kill daemons Reddwarf depends on.

        --reddwarf services--
          start           - Start or resume daemons Reddwarf depends on.
          stop            - Kill daemons Reddwarf depends on.

        --tests--
          unit-tests      - Run the unit tests.dependencies
          int-tests       - Runs the integration tests (requires all daemons).

        --tools--
          debug           - Debug this script (shows all commands).
          glance-client   - Runs glance client with admin user.
          nova-client     - Runs Nova client with admin user.
          rd-client       - Runs Reddwarf client with admin user.
                            * Shows a valid token.
          wipe-logs       - Resets all log files.
          nova-delete     - Deletes a nova instance.
          rd-sql          - Opens the Reddwarf MySQL database.
          vagrant-ssh     - Runs a command from the host on the server.
          set-image       - Sets the image without building it.
          clear           - Destroy instances and rabbit queues.
          run             - Starts RD but not in a screen.
          run-fake        - Runs the server in fake mode.
          update-projects - Git pull on all the daemons reddwarf dependencies.
    "
    exit 1
}

function run_command() {
    # Print the available commands
    if [ $# -lt 1 ]; then
        print_usage
    fi

    case "$1" in
        "install" ) cmd_install;;
        "build" ) cmd_build;;
        "initialize" ) cmd_initialize;;
        "build-image" ) shift; cmd_build_image $@;;
        "unit-tests" ) cmd_unit_tests;;
        "start-deps" ) cmd_start_deps;;
        "stop-deps" ) cmd_stop_deps;;
        "start" ) cmd_start;;
        "int-tests" ) shift; cmd_int_tests $@;;
        "stop" ) cmd_stop;;
        "glance-client" ) shift; cmd_glance_client;;
        "nova-client" ) shift; cmd_nova_client $@;;
        "rd-client" ) shift; cmd_rd_client $@;;
        "nova-delete" ) shift; cmd_delete_nova_instance $@;;
        "wipe-logs" ) cmd_wipe_logs;;
        "rd-sql" ) shift; cmd_rd_sql $@;;
        "run-ci" ) shift; cmd_run_ci $@;;
        "vagrant-ssh" ) shift; cmd_vagrant_ssh $@;;
        "debug" ) shift; echo "Enabling debugging."; \
                  set -o xtrace; run_command $@;;
        "set-image" ) shift; cmd_set_image $@;;
        "clear" ) shift; cmd_clear $@;;
        "run" ) shift; cmd_run $@;;
        "kick-start" ) shift; cmd_kick_start $@;;
        "run-fake" ) shift; cmd_run_fake $@;;
        "update-projects" ) cmd_update_projects;;
        * )
            echo "'$1' not a valid command"
            exit 1
    esac
}

run_command $@

